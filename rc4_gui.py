#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 5.0.3
#  in conjunction with Tcl version 8.6
#    Sep 05, 2021 05:13:53 PM +07  platform: Windows NT

import sys
from tkinter.constants import DISABLED

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import start
import rc4_gui_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root, top
    root = tk.Tk()
    rc4_gui_support.setTkVariable()
    top = MainWindow (root)
    rc4_gui_support.init(root, top)
    root.mainloop()

w = None
def create_MainWindow(rt, *args, **kwargs):
    '''Starting point when module is imported by another module.
       Correct form of call: 'create_MainWindow(root, *args, **kwargs)' .'''
    global w, w_win, root
    #rt = root
    root = rt
    w = tk.Toplevel (root)
    top = MainWindow (w)
    rc4_gui_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_MainWindow():
    global w
    w.destroy()
    w = None

class MainWindow:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#ffffff'  # X11 color: 'white'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        font11 = "-family {Yumaro Rough} -size 12"
        font12 = "-family {Segoe UI} -size 14"
        font9 = "-family {Segoe UI} -size 9"
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font=font9)
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("1024x768+200+50")
        top.minsize(148, 1)
        top.maxsize(1924, 1055)
        top.resizable(1, 1)
        top.title("Main")
        top.configure(background="#ffffff")

        self.typeLabel = tk.Label(top)
        self.typeLabel.place(relx=0.039, rely=0.039, height=86, width=436)
        self.typeLabel.configure(background="#ffffff")
        self.typeLabel.configure(disabledforeground="#a3a3a3")
        self.typeLabel.configure(font=font11)
        self.typeLabel.configure(foreground="#000000")
        self.typeLabel.configure(text='RC4: '+start.processType )

        self.keyEntry = tk.Entry(top)
        self.keyEntry.place(relx=0.508, rely=0.091,height=34, relwidth=0.443)
        self.keyEntry.configure(background="white")
        self.keyEntry.configure(disabledforeground="#a3a3a3")
        self.keyEntry.configure(font="TkFixedFont")
        self.keyEntry.configure(foreground="#000000")
        self.keyEntry.configure(insertbackground="black")
        self.keyEntry.configure(textvariable=rc4_gui_support.keyEntryVar)

        self.keyLabel = tk.Label(top)
        self.keyLabel.place(relx=0.508, rely=0.052, height=26, width=84)
        self.keyLabel.configure(anchor='w')
        self.keyLabel.configure(background="#ffffff")
        self.keyLabel.configure(disabledforeground="#a3a3a3")
        self.keyLabel.configure(font="-family {Segoe UI} -size 9")
        self.keyLabel.configure(foreground="#000000")
        self.keyLabel.configure(text='''Input Key:''')

        self.TSeparator1 = ttk.Separator(top)
        self.TSeparator1.place(relx=0.029, rely=0.182, relwidth=0.938)

        self.plainLabel = tk.Label(top)
        self.plainLabel.place(relx=0.039, rely=0.221, height=26, width=92)
        self.plainLabel.configure(anchor='w')
        self.plainLabel.configure(background="#ffffff")
        self.plainLabel.configure(disabledforeground="#a3a3a3")
        self.plainLabel.configure(font="-family {Segoe UI} -size 9")
        self.plainLabel.configure(foreground="#000000")
        self.plainLabel.configure(text='''Plain Text:''')

        self.cypherLabel = tk.Label(top)
        self.cypherLabel.place(relx=0.039, rely=0.547, height=26, width=132)
        self.cypherLabel.configure(activebackground="#f9f9f9")
        self.cypherLabel.configure(activeforeground="black")
        self.cypherLabel.configure(anchor='w')
        self.cypherLabel.configure(background="#ffffff")
        self.cypherLabel.configure(disabledforeground="#a3a3a3")
        self.cypherLabel.configure(font="-family {Segoe UI} -size 9")
        self.cypherLabel.configure(foreground="#000000")
        self.cypherLabel.configure(highlightbackground="#d9d9d9")
        self.cypherLabel.configure(highlightcolor="black")
        self.cypherLabel.configure(text='''Cypher Text:''')

        self.TSeparator2 = ttk.Separator(top)
        self.TSeparator2.place(relx=0.586, rely=0.339, relheight=0.586)
        self.TSeparator2.configure(orient="vertical")

        self.Label1 = tk.Label(top)
        self.Label1.place(relx=0.566, rely=0.273, height=26, width=42)
        self.Label1.configure(background="#ffffff")
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(font=font12)
        self.Label1.configure(foreground="#000000")
        self.Label1.configure(text='''OR''')

        self.fileTextInputButton = tk.Button(top)
        self.fileTextInputButton.place(relx=0.684, rely=0.365, height=33
                , width=206)
        self.fileTextInputButton.configure(activebackground="#ececec")
        self.fileTextInputButton.configure(activeforeground="#000000")
        self.fileTextInputButton.configure(background="#ffffff")
        self.fileTextInputButton.configure(disabledforeground="#a3a3a3")
        self.fileTextInputButton.configure(font="-family {Segoe UI} -size 9")
        self.fileTextInputButton.configure(foreground="#000000")
        self.fileTextInputButton.configure(highlightbackground="#ffffff")
        self.fileTextInputButton.configure(highlightcolor="black")
        self.fileTextInputButton.configure(pady="0")
        self.fileTextInputButton.configure(text='''Input Text File''')
        self.fileTextInputButton.configure(command=lambda: rc4_gui_support.loadTextFile(start.processType))

        self.savePlainButton = tk.Button(top)
        self.savePlainButton.place(relx=0.039, rely=0.885, height=33, width=249)
        self.savePlainButton.configure(activebackground="#ececec")
        self.savePlainButton.configure(activeforeground="#000000")
        self.savePlainButton.configure(background="#ffffff")
        self.savePlainButton.configure(disabledforeground="#a3a3a3")
        self.savePlainButton.configure(font="-family {Segoe UI} -size 9")
        self.savePlainButton.configure(foreground="#000000")
        self.savePlainButton.configure(highlightbackground="#ffffff")
        self.savePlainButton.configure(highlightcolor="black")
        self.savePlainButton.configure(pady="0")
        self.savePlainButton.configure(text='''Save Plain Text To File''')
        self.savePlainButton.configure(command=lambda: rc4_gui_support.saveToFile('PLAIN'))

        self.saveCypherButton = tk.Button(top)
        self.saveCypherButton.place(relx=0.303, rely=0.885, height=33, width=236)

        self.saveCypherButton.configure(activebackground="#ececec")
        self.saveCypherButton.configure(activeforeground="#000000")
        self.saveCypherButton.configure(background="#ffffff")
        self.saveCypherButton.configure(cursor="fleur")
        self.saveCypherButton.configure(disabledforeground="#a3a3a3")
        self.saveCypherButton.configure(font="-family {Segoe UI} -size 9")
        self.saveCypherButton.configure(foreground="#000000")
        self.saveCypherButton.configure(highlightbackground="#ffffff")
        self.saveCypherButton.configure(highlightcolor="black")
        self.saveCypherButton.configure(pady="0")
        self.saveCypherButton.configure(text='''Save Cypher Text To File''')
        self.saveCypherButton.configure(command=lambda: rc4_gui_support.saveToFile('CYPH'))

        self.fileBinerInputButton = tk.Button(top)
        self.fileBinerInputButton.place(relx=0.684, rely=0.43, height=33
                , width=206)
        self.fileBinerInputButton.configure(activebackground="#ececec")
        self.fileBinerInputButton.configure(activeforeground="#000000")
        self.fileBinerInputButton.configure(background="#ffffff")
        self.fileBinerInputButton.configure(disabledforeground="#a3a3a3")
        self.fileBinerInputButton.configure(font="-family {Segoe UI} -size 9")
        self.fileBinerInputButton.configure(foreground="#000000")
        self.fileBinerInputButton.configure(highlightbackground="#ffffff")
        self.fileBinerInputButton.configure(highlightcolor="black")
        self.fileBinerInputButton.configure(pady="0")
        self.fileBinerInputButton.configure(text='''Input Biner File''')
        self.fileBinerInputButton.configure(command=lambda: rc4_gui_support.loadBinerFile(start.processType))

        self.TSeparator3 = ttk.Separator(top)
        self.TSeparator3.place(relx=0.625, rely=0.599, relwidth=0.323)

        self.statusLabel = tk.Label(top)
        self.statusLabel.place(relx=0.625, rely=0.638, height=26, width=332)
        self.statusLabel.configure(anchor='w')
        self.statusLabel.configure(background="#ffffff")
        self.statusLabel.configure(disabledforeground="#a3a3a3")
        self.statusLabel.configure(font="-family {Segoe UI} -size 9")
        self.statusLabel.configure(foreground="#000000")
        self.statusLabel.configure(textvariable=rc4_gui_support.labelStatusVar)

        self.proceedButton = tk.Button(top)
        self.proceedButton.place(relx=0.625, rely=0.846, height=53, width=336)
        self.proceedButton.configure(activebackground="#ececec")
        self.proceedButton.configure(activeforeground="#000000")
        self.proceedButton.configure(background="#ffffff")
        self.proceedButton.configure(disabledforeground="#a3a3a3")
        self.proceedButton.configure(font="-family {Segoe UI} -size 9")
        self.proceedButton.configure(foreground="#000000")
        self.proceedButton.configure(highlightbackground="#ffffff")
        self.proceedButton.configure(highlightcolor="black")
        self.proceedButton.configure(pady="0")
        self.proceedButton.configure(text=start.processType+' NOW')
        self.proceedButton.configure(command=lambda: rc4_gui_support.processNow(start.processType))

        self.plainEntry = tk.Text(top)
        self.plainEntry.place(relx=0.039, rely=0.26, relheight=0.263
                , relwidth=0.482)
        self.plainEntry.configure(background="white")
        self.plainEntry.configure(font="TkTextFont")
        self.plainEntry.configure(foreground="black")
        self.plainEntry.configure(highlightbackground="#ffffff")
        self.plainEntry.configure(highlightcolor="black")
        self.plainEntry.configure(insertbackground="black")
        self.plainEntry.configure(selectbackground="#c4c4c4")
        self.plainEntry.configure(selectforeground="black")
        self.plainEntry.configure(wrap="word")

        self.cypherEntry = tk.Text(top)
        self.cypherEntry.place(relx=0.039, rely=0.586, relheight=0.263
                , relwidth=0.482)
        self.cypherEntry.configure(background="white")
        self.cypherEntry.configure(font="TkTextFont")
        self.cypherEntry.configure(foreground="black")
        self.cypherEntry.configure(highlightbackground="#ffffff")
        self.cypherEntry.configure(highlightcolor="black")
        self.cypherEntry.configure(insertbackground="black")
        self.cypherEntry.configure(selectbackground="#c4c4c4")
        self.cypherEntry.configure(selectforeground="black")
        self.cypherEntry.configure(wrap="word")
    
    def getPlainEntryValue(self):
        return self.plainEntry.get("1.0", tk.END+"-1c")
    def getCypherEntryValue(self):
        return self.cypherEntry.get("1.0", tk.END+"-1c")
    def setPlainEntryValue(self, value):
        self.plainEntry.delete("1.0", tk.END+"-1c")
        self.plainEntry.insert("1.0", value)
    def setCypherEntryValue(self, value):
        self.cypherEntry.delete("1.0", tk.END+"-1c")
        self.cypherEntry.insert("1.0", value)